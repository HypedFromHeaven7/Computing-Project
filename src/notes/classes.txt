###################################################################################################
############################################# Classes ############################################# 
###################################################################################################
A class is defined, with a class name. Describes the processes applicable to different attributes
of an object, ordered by class variables.


###################################################################################################
############################################## self ###############################################
###################################################################################################
self.{variable} describes a variable of the placeholder object for the specific variable. If g is 
an object and the permitted attributes in the class are i, j, k then g.i, g.j, g.k are separate 
variables of the same object.


###################################################################################################
############################################## init ###############################################
###################################################################################################
The __init__ statement of the class initialises - sets the initial conditions of the object. While
adding variables specify the initial conditions.

def __init__(self, x = 0.0, g = None)

This means, we're setting the object properties when the variable, x, and the list, g, aren't 
given. We should note the use of 0.0, we're defining the input of x to be a float by using the 
point. If we wanted x to be an integer we'd use x = 0. When we set an object and we want to set 
these variables we can:

object = class(x = 3.2, g = [3,2])


##################################################################################################
############################################## doc ###############################################
##################################################################################################
The __doc__ attribute of a class describes the documentation of the class. Common convention is to 
not actually use the __doc__ command and to just write the documentation at the start of the class.


###################################################################################################
############################################ repr/str #############################################
###################################################################################################
The __repr__ definition sets how the object identifies when called by repr() - command line execute.
Where as __str__ definition sets how the objects is viewed when called by str() - print() output.
Not defining the str output results in repr turning into the default output.



###################################################################################################
######################################### Access Methods ##########################################
###################################################################################################
Methods to access attribute, the fact that it's a method means using brackets after calling the
attribute of the object. However can use @property to turn the method into a property, make it so
that you don't need to use brackets.



###################################################################################################
########################################### Arithmetic ############################################
###################################################################################################
Using __add__ and __sub__ can describe how objects are added, __iadd__ and __isub__ describe how
+= and -= work. Similarly we can look at https://docs.python.org/3/library/operator.html to define 
how objects of a class interact with each other.



